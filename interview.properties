#In my current project, we use Java along with Maven. Our framework is a combination of BDD and DDT frameworks
# so we call it Hybrid. We use Cucumber as a BDD tool do develop test scenarios from end-user perspective.
#Thus, our test scenarios are readable for non-technical people. We store test scenarios in feature files.
#Also, we follow Page Object Model design pattern. Basically we create corresponded page class for every page
#of application. It helps to organize code, specifically WebElements and separate test from page logic.
#Every page class stores web elements and relevant to the particular page functional methods.
#For example for Login page we have LoginPage,java class, under pages package.
#We use ThreadLocal driver to ensure thread safety and run tests in parallel.
#Besides pages package, we have package with step definitions, where we store code implementation for cucumber test steps.
#Then we have utilities package, where we store reusable methods and Driver class.
#For configuration, we use properties file. Last but not least, we schedule smoke and regression tests in Jenkins by pulling code from github.

#Maven - it's a project build tool, and also used to manage dependencies.
# Maven has it's own life-cycle (it's a group of commands that maven executes to build, test and deploy project)

#Cucumber flow:
#Feature file: inside feature file we write scenarios
#Every scenario consists of tests steps.
#Every test step must start with gherkin keyword: Given, When, Then, And, But
#Every test step also has a code implementation, which calls step definition.
#Inside step definition, we perform actions and assertions, by using page objects